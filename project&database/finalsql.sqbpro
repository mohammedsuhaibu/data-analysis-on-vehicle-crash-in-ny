<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/sanan/Downloads/MIS final project/finalsql.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3771"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,12:mainCONSOLIDATED"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="CONSOLIDATED" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="19" mode="1"/></sort><column_widths><column index="1" value="79"/><column index="2" value="96"/><column index="3" value="96"/><column index="4" value="97"/><column index="5" value="90"/><column index="6" value="89"/><column index="7" value="110"/><column index="8" value="82"/><column index="9" value="227"/><column index="10" value="147"/><column index="11" value="149"/><column index="12" value="103"/><column index="13" value="170"/><column index="14" value="209"/><column index="15" value="300"/><column index="16" value="109"/><column index="17" value="85"/><column index="18" value="82"/><column index="20" value="63"/><column index="21" value="47"/><column index="22" value="61"/><column index="23" value="68"/><column index="24" value="76"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Crashtime_Per_County" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="57"/><column index="2" value="43"/><column index="3" value="40"/><column index="4" value="40"/><column index="5" value="40"/><column index="6" value="82"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Injury_per_county_by_vehicle_category" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="57"/><column index="2" value="110"/><column index="3" value="135"/><column index="4" value="122"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Injury Per county by Vehicle Category.sql">DROP TABLE IF EXISTS INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY;

CREATE TABLE INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY(
  COUNTY TEXT,
  VEHICLE_CATEGORY TEXT,
  COLLISION_COUNT INTEGER
);

INSERT INTO INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY (COUNTY, VEHICLE_CATEGORY, COLLISION_COUNT)
SELECT COUNTY, VEHICLE_CATEGORY, SUM(COLLISION_COUNT) AS COLLISION_COUNT
FROM (
    SELECT COUNTY, VEHICLE_CATEGORY, COUNT(COLLISION_ID) AS COLLISION_COUNT
    FROM CONSOLIDATED
    WHERE PERSON_INJURY IS NOT NULL AND PERSON_INJURY != 'Unspecified'
    GROUP BY COUNTY, VEHICLE_CATEGORY
) AS INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY
GROUP BY COUNTY, VEHICLE_CATEGORY

ORDER BY COLLISION_COUNT DESC;

SELECT * FROM INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY;</sql><sql name="Crashtime_Per_County.sql">DROP TABLE IF EXISTS CRASHTIME_PER_COUNTY;

CREATE TABLE CRASHTIME_PER_COUNTY (
  COUNTY TEXT,
  HOUR INTEGER,
  `2019` INTEGER,
  `2020` INTEGER,
  `2021` INTEGER,
  COLLISION_COUNT INTEGER
);

INSERT INTO CRASHTIME_PER_COUNTY (COUNTY, HOUR, `2019`, `2020`, `2021`, COLLISION_COUNT)
SELECT COUNTY, 
cast(substr(CRASHTIME, 1, 2) as int) as HOUR,
sum(case when substr(CRASHDATE, 7) = '2019' then 1 else 0 end) as `2019`,
sum(case when substr(CRASHDATE, 7) = '2020' then 1 else 0 end) as `2020`,
sum(case when substr(CRASHDATE, 7) = '2021' then 1 else 0 end) as `2021`,
count(COLLISION_ID) as COLLISION_COUNT
FROM CONSOLIDATED
WHERE COUNTY IS NOT NULL AND CRASHDATE IS NOT NULL AND CRASHTIME IS NOT NULL
GROUP BY COUNTY, cast(substr(CRASHTIME, 1, 2) as int)
ORDER BY COUNTY, HOUR;

SELECT * FROM CRASHTIME_PER_COUNTY;</sql><sql name="PERSON_INJURED_BY_SAFETY_EQUIPMENT.sql">DROP TABLE IF EXISTS PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX;

CREATE TABLE PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX (
    PERSON_SEX TEXT,
    Other INTEGER,
    None INTEGER,
    &quot;Lap Belt &amp; Harness&quot; INTEGER,
	&quot;Lap Belt&quot; INTEGER,
    &quot;Child Restraint Only&quot; INTEGER,
	&quot;Air Bag Deployed/Lap Belt/Harness&quot; INTEGER,
	&quot;Helmet/Other (In-Line Skater/Bicyclist)&quot; INTEGER,
	Harness INTEGER,
	&quot;Helmet Only (In-Line Skater/Bicyclist)&quot; INTEGER,
	&quot;Air Bag Deployed&quot; INTEGER,
	&quot;Air Bag Deployed/Lap Belt&quot; INTEGER,
	&quot;Helmet (Motorcycle Only)&quot; INTEGER,
	&quot;Stoppers Only (In-Line Skater/Bicyclist)&quot; INTEGER,
	&quot;Air Bag Deployed/Child Restraint&quot; INTEGER,
	&quot;Pads Only (In-Line Skater/Bicyclist)&quot; INTEGER,
    &quot;Grand Total&quot; INTEGER
);

INSERT INTO PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX(
    PERSON_SEX,
    Other,
    None,
    &quot;Lap Belt &amp; Harness&quot;,
	&quot;Lap Belt&quot;,
    &quot;Child Restraint Only&quot;,
	&quot;Air Bag Deployed/Lap Belt/Harness&quot;,
	&quot;Helmet/Other (In-Line Skater/Bicyclist)&quot;,
	Harness,
	&quot;Helmet Only (In-Line Skater/Bicyclist)&quot;,
	&quot;Air Bag Deployed&quot;,
	&quot;Air Bag Deployed/Lap Belt&quot;,
	&quot;Helmet (Motorcycle Only)&quot;,
	&quot;Stoppers Only (In-Line Skater/Bicyclist)&quot;,
	&quot;Air Bag Deployed/Child Restraint&quot;,
	&quot;Pads Only (In-Line Skater/Bicyclist)&quot;,
    &quot;Grand Total&quot; 
)
SELECT PERSON_SEX,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Other' THEN 1 ELSE 0 END) AS Other,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'None' THEN 1 ELSE 0 END) AS None,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Lap Belt &amp; Harness' THEN 1 ELSE 0 END) AS &quot;Lap Belt &amp; Harness&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Lap Belt' THEN 1 ELSE 0 END) AS &quot;Lap Belt&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Child Restraint Only' THEN 1 ELSE 0 END) AS &quot;Child Restraint Only&quot;,
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed/Lap Belt/Harness' THEN 1 ELSE 0 END) AS &quot;Air Bag Deployed/Lap Belt/Harness&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Helmet/Other (In-Line Skater/Bicyclist)' THEN 1 ELSE 0 END) AS &quot;Helmet/Other (In-Line Skater/Bicyclist)&quot;,
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Harness' THEN 1 ELSE 0 END) AS Harness,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Helmet Only (In-Line Skater/Bicyclist)' THEN 1 ELSE 0 END) AS &quot;Helmet Only (In-Line Skater/Bicyclist)&quot;,	
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed' THEN 1 ELSE 0 END) AS &quot;Air Bag Deployed&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed/Lap Belt' THEN 1 ELSE 0 END) AS &quot;Air Bag Deployed/Lap Belt&quot;,
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Helmet (Motorcycle Only)' THEN 1 ELSE 0 END) AS &quot;Helmet (Motorcycle Only)&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Stoppers Only (In-Line Skater/Bicyclist' THEN 1 ELSE 0 END) AS &quot;Stoppers Only (In-Line Skater/Bicyclist&quot;,
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed/Child Restraint' THEN 1 ELSE 0 END) AS &quot;Air Bag Deployed/Child Restraint&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Pads Only (In-Line Skater/Bicyclist)' THEN 1 ELSE 0 END) AS &quot;Pads Only (In-Line Skater/Bicyclist)&quot;,
    COUNT (*) AS &quot;Grand Total&quot;
    FROM CONSOLIDATED
    WHERE PERSON_SEX IN ('F', 'M')
    GROUP BY PERSON_SEX
;

SELECT * FROM PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX;</sql><sql name="Perosn_Injured_by_Sex.sql">DROP TABLE IF EXISTS PERSON_INJURED_BY_SEX;

CREATE TABLE PERSON_INJURED_BY_SEX (
    PERSON_INJURY TEXT,
    PERSON_SEX TEXT,
    BRONX INTEGER,
    BROOKLYN INTEGER,
    MANHATTAN INTEGER,
    QUEENS INTEGER,
    &quot;STATEN ISLAND&quot; INTEGER,
    &quot;Grand Total&quot; INTEGER
);

INSERT INTO PERSON_INJURED_BY_SEX (
    PERSON_INJURY,
    PERSON_SEX,
    BRONX,
    BROOKLYN,
    MANHATTAN,
    QUEENS,
    &quot;STATEN ISLAND&quot;,
    &quot;Grand Total&quot;
)
SELECT PERSON_INJURY, PERSON_SEX,
    SUM(CASE WHEN BOROUGH = 'BRONX' THEN COLLISION_COUNT ELSE 0 END) AS BRONX,
    SUM(CASE WHEN BOROUGH = 'BROOKLYN' THEN COLLISION_COUNT ELSE 0 END) AS BROOKLYN,
    SUM(CASE WHEN BOROUGH = 'MANHATTAN' THEN COLLISION_COUNT ELSE 0 END) AS MANHATTAN,
    SUM(CASE WHEN BOROUGH = 'QUEENS' THEN COLLISION_COUNT ELSE 0 END) AS QUEENS,
    SUM(CASE WHEN BOROUGH = 'STATEN ISLAND' THEN COLLISION_COUNT ELSE 0 END) AS &quot;STATEN ISLAND&quot;,
    SUM(COLLISION_COUNT) AS &quot;Grand Total&quot;
FROM (
    SELECT PERSON_INJURY, PERSON_SEX, BOROUGH, COUNT(COLLISION_ID) AS COLLISION_COUNT
    FROM CONSOLIDATED
    WHERE PERSON_INJURY IN ('Killed', 'Injured') AND PERSON_SEX IN ('F', 'M')
    GROUP BY PERSON_INJURY, PERSON_SEX, BOROUGH
) AS subquery
GROUP BY PERSON_INJURY, PERSON_SEX

UNION

SELECT 'Grand Total', NULL,
    SUM(CASE WHEN BOROUGH = 'BRONX' THEN COLLISION_COUNT ELSE 0 END) AS BRONX,
    SUM(CASE WHEN BOROUGH = 'BROOKLYN' THEN COLLISION_COUNT ELSE 0 END) AS BROOKLYN,
    SUM(CASE WHEN BOROUGH = 'MANHATTAN' THEN COLLISION_COUNT ELSE 0 END) AS MANHATTAN,
    SUM(CASE WHEN BOROUGH = 'QUEENS' THEN COLLISION_COUNT ELSE 0 END) AS QUEENS,
    SUM(CASE WHEN BOROUGH = 'STATEN ISLAND' THEN COLLISION_COUNT ELSE 0 END) AS &quot;STATEN ISLAND&quot;,
    SUM(COLLISION_COUNT) AS &quot;Grand Total&quot;
FROM (
    SELECT PERSON_INJURY, PERSON_SEX, BOROUGH, COUNT(COLLISION_ID) AS COLLISION_COUNT
    FROM CONSOLIDATED
    WHERE PERSON_INJURY IN ('Killed', 'Injured') AND PERSON_SEX IN ('F', 'M')
    GROUP BY PERSON_INJURY, PERSON_SEX, BOROUGH
) AS subquery
GROUP BY 1
ORDER BY 1 DESC, 2 ASC;


Select * FROM PERSON_INJURED_BY_SEX</sql><sql name="dashboardqueries.sql">DROP TABLE IF EXISTS INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY;

CREATE TABLE INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY(
  COUNTY TEXT,
  VEHICLE_CATEGORY TEXT,
  COLLISION_COUNT INTEGER
);

INSERT INTO INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY (COUNTY, VEHICLE_CATEGORY, COLLISION_COUNT)
SELECT COUNTY, VEHICLE_CATEGORY, SUM(COLLISION_COUNT) AS COLLISION_COUNT
FROM (
    SELECT COUNTY, VEHICLE_CATEGORY, COUNT(COLLISION_ID) AS COLLISION_COUNT
    FROM CONSOLIDATED
    WHERE PERSON_INJURY IS NOT NULL AND PERSON_INJURY != 'Unspecified'
    GROUP BY COUNTY, VEHICLE_CATEGORY
) AS INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY
GROUP BY COUNTY, VEHICLE_CATEGORY

ORDER BY COLLISION_COUNT DESC;

SELECT * FROM INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY;

---------------------------------------------------------------------------------------------------
-- CRASHTIME_PER_COUNTY
DROP TABLE IF EXISTS CRASHTIME_PER_COUNTY;

CREATE TABLE CRASHTIME_PER_COUNTY (
  COUNTY TEXT,
  HOUR INTEGER,
  `2019` INTEGER,
  `2020` INTEGER,
  `2021` INTEGER,
  COLLISION_COUNT INTEGER
);

INSERT INTO CRASHTIME_PER_COUNTY (COUNTY, HOUR, `2019`, `2020`, `2021`, COLLISION_COUNT)
SELECT COUNTY, 
cast(substr(CRASHTIME, 1, 2) as int) as HOUR,
sum(case when substr(CRASHDATE, 7) = '2019' then 1 else 0 end) as `2019`,
sum(case when substr(CRASHDATE, 7) = '2020' then 1 else 0 end) as `2020`,
sum(case when substr(CRASHDATE, 7) = '2021' then 1 else 0 end) as `2021`,
count(COLLISION_ID) as COLLISION_COUNT
FROM CONSOLIDATED
WHERE COUNTY IS NOT NULL AND CRASHDATE IS NOT NULL AND CRASHTIME IS NOT NULL
GROUP BY COUNTY, cast(substr(CRASHTIME, 1, 2) as int)
ORDER BY COUNTY, HOUR;

SELECT * FROM CRASHTIME_PER_COUNTY;

---------------------------------------------------------------------------------------------------
-- PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX
DROP TABLE IF EXISTS PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX;

CREATE TABLE PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX (
    PERSON_SEX TEXT,
    Other INTEGER,
    None INTEGER,
    &quot;Lap Belt &amp; Harness&quot; INTEGER,
	&quot;Lap Belt&quot; INTEGER,
    &quot;Child Restraint Only&quot; INTEGER,
	&quot;Air Bag Deployed/Lap Belt/Harness&quot; INTEGER,
	&quot;Helmet/Other (In-Line Skater/Bicyclist)&quot; INTEGER,
	Harness INTEGER,
	&quot;Helmet Only (In-Line Skater/Bicyclist)&quot; INTEGER,
	&quot;Air Bag Deployed&quot; INTEGER,
	&quot;Air Bag Deployed/Lap Belt&quot; INTEGER,
	&quot;Helmet (Motorcycle Only)&quot; INTEGER,
	&quot;Stoppers Only (In-Line Skater/Bicyclist)&quot; INTEGER,
	&quot;Air Bag Deployed/Child Restraint&quot; INTEGER,
	&quot;Pads Only (In-Line Skater/Bicyclist)&quot; INTEGER,
    &quot;Grand Total&quot; INTEGER
);

INSERT INTO PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX(
    PERSON_SEX,
    Other,
    None,
    &quot;Lap Belt &amp; Harness&quot;,
	&quot;Lap Belt&quot;,
    &quot;Child Restraint Only&quot;,
	&quot;Air Bag Deployed/Lap Belt/Harness&quot;,
	&quot;Helmet/Other (In-Line Skater/Bicyclist)&quot;,
	Harness,
	&quot;Helmet Only (In-Line Skater/Bicyclist)&quot;,
	&quot;Air Bag Deployed&quot;,
	&quot;Air Bag Deployed/Lap Belt&quot;,
	&quot;Helmet (Motorcycle Only)&quot;,
	&quot;Stoppers Only (In-Line Skater/Bicyclist)&quot;,
	&quot;Air Bag Deployed/Child Restraint&quot;,
	&quot;Pads Only (In-Line Skater/Bicyclist)&quot;,
    &quot;Grand Total&quot; 
)
SELECT PERSON_SEX,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Other' THEN 1 ELSE 0 END) AS Other,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'None' THEN 1 ELSE 0 END) AS None,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Lap Belt &amp; Harness' THEN 1 ELSE 0 END) AS &quot;Lap Belt &amp; Harness&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Lap Belt' THEN 1 ELSE 0 END) AS &quot;Lap Belt&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Child Restraint Only' THEN 1 ELSE 0 END) AS &quot;Child Restraint Only&quot;,
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed/Lap Belt/Harness' THEN 1 ELSE 0 END) AS &quot;Air Bag Deployed/Lap Belt/Harness&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Helmet/Other (In-Line Skater/Bicyclist)' THEN 1 ELSE 0 END) AS &quot;Helmet/Other (In-Line Skater/Bicyclist)&quot;,
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Harness' THEN 1 ELSE 0 END) AS Harness,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Helmet Only (In-Line Skater/Bicyclist)' THEN 1 ELSE 0 END) AS &quot;Helmet Only (In-Line Skater/Bicyclist)&quot;,	
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed' THEN 1 ELSE 0 END) AS &quot;Air Bag Deployed&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed/Lap Belt' THEN 1 ELSE 0 END) AS &quot;Air Bag Deployed/Lap Belt&quot;,
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Helmet (Motorcycle Only)' THEN 1 ELSE 0 END) AS &quot;Helmet (Motorcycle Only)&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Stoppers Only (In-Line Skater/Bicyclist' THEN 1 ELSE 0 END) AS &quot;Stoppers Only (In-Line Skater/Bicyclist&quot;,
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed/Child Restraint' THEN 1 ELSE 0 END) AS &quot;Air Bag Deployed/Child Restraint&quot;,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Pads Only (In-Line Skater/Bicyclist)' THEN 1 ELSE 0 END) AS &quot;Pads Only (In-Line Skater/Bicyclist)&quot;,
    COUNT (*) AS &quot;Grand Total&quot;
    FROM CONSOLIDATED
    WHERE PERSON_SEX IN ('F', 'M')
    GROUP BY PERSON_SEX
;

SELECT * FROM PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX;

---------------------------------------------------------------------------------------------------
-- Perosn_Injured_by_Sex
DROP TABLE IF EXISTS PERSON_INJURED_BY_SEX;

CREATE TABLE PERSON_INJURED_BY_SEX (
    PERSON_INJURY TEXT,
    PERSON_SEX TEXT,
    BRONX INTEGER,
    BROOKLYN INTEGER,
    MANHATTAN INTEGER,
    QUEENS INTEGER,
    &quot;STATEN ISLAND&quot; INTEGER,
    &quot;Grand Total&quot; INTEGER
);

INSERT INTO PERSON_INJURED_BY_SEX (
    PERSON_INJURY,
    PERSON_SEX,
    BRONX,
    BROOKLYN,
    MANHATTAN,
    QUEENS,
    &quot;STATEN ISLAND&quot;,
    &quot;Grand Total&quot;
)
SELECT PERSON_INJURY, PERSON_SEX,
    SUM(CASE WHEN BOROUGH = 'BRONX' THEN COLLISION_COUNT ELSE 0 END) AS BRONX,
    SUM(CASE WHEN BOROUGH = 'BROOKLYN' THEN COLLISION_COUNT ELSE 0 END) AS BROOKLYN,
    SUM(CASE WHEN BOROUGH = 'MANHATTAN' THEN COLLISION_COUNT ELSE 0 END) AS MANHATTAN,
    SUM(CASE WHEN BOROUGH = 'QUEENS' THEN COLLISION_COUNT ELSE 0 END) AS QUEENS,
    SUM(CASE WHEN BOROUGH = 'STATEN ISLAND' THEN COLLISION_COUNT ELSE 0 END) AS &quot;STATEN ISLAND&quot;,
    SUM(COLLISION_COUNT) AS &quot;Grand Total&quot;
FROM (
    SELECT PERSON_INJURY, PERSON_SEX, BOROUGH, COUNT(COLLISION_ID) AS COLLISION_COUNT
    FROM CONSOLIDATED
    WHERE PERSON_INJURY IN ('Killed', 'Injured') AND PERSON_SEX IN ('F', 'M')
    GROUP BY PERSON_INJURY, PERSON_SEX, BOROUGH
) AS subquery
GROUP BY PERSON_INJURY, PERSON_SEX

UNION

SELECT 'Grand Total', NULL,
    SUM(CASE WHEN BOROUGH = 'BRONX' THEN COLLISION_COUNT ELSE 0 END) AS BRONX,
    SUM(CASE WHEN BOROUGH = 'BROOKLYN' THEN COLLISION_COUNT ELSE 0 END) AS BROOKLYN,
    SUM(CASE WHEN BOROUGH = 'MANHATTAN' THEN COLLISION_COUNT ELSE 0 END) AS MANHATTAN,
    SUM(CASE WHEN BOROUGH = 'QUEENS' THEN COLLISION_COUNT ELSE 0 END) AS QUEENS,
    SUM(CASE WHEN BOROUGH = 'STATEN ISLAND' THEN COLLISION_COUNT ELSE 0 END) AS &quot;STATEN ISLAND&quot;,
    SUM(COLLISION_COUNT) AS &quot;Grand Total&quot;
FROM (
    SELECT PERSON_INJURY, PERSON_SEX, BOROUGH, COUNT(COLLISION_ID) AS COLLISION_COUNT
    FROM CONSOLIDATED
    WHERE PERSON_INJURY IN ('Killed', 'Injured') AND PERSON_SEX IN ('F', 'M')
    GROUP BY PERSON_INJURY, PERSON_SEX, BOROUGH
) AS subquery
GROUP BY 1
ORDER BY 1 DESC, 2 ASC;


Select * FROM PERSON_INJURED_BY_SEX</sql><current_tab id="3"/></tab_sql></sqlb_project>
