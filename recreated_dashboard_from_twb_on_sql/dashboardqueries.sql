DROP TABLE IF EXISTS INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY;

CREATE TABLE INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY(
  COUNTY TEXT,
  VEHICLE_CATEGORY TEXT,
  COLLISION_COUNT INTEGER
);

INSERT INTO INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY (COUNTY, VEHICLE_CATEGORY, COLLISION_COUNT)
SELECT COUNTY, VEHICLE_CATEGORY, SUM(COLLISION_COUNT) AS COLLISION_COUNT
FROM (
    SELECT COUNTY, VEHICLE_CATEGORY, COUNT(COLLISION_ID) AS COLLISION_COUNT
    FROM CONSOLIDATED
    WHERE PERSON_INJURY IS NOT NULL AND PERSON_INJURY != 'Unspecified'
    GROUP BY COUNTY, VEHICLE_CATEGORY
) AS INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY
GROUP BY COUNTY, VEHICLE_CATEGORY

ORDER BY COLLISION_COUNT DESC;

SELECT * FROM INJURY_PER_COUNTY_BY_VEHICLE_CATEGORY;

---------------------------------------------------------------------------------------------------
-- CRASHTIME_PER_COUNTY
DROP TABLE IF EXISTS CRASHTIME_PER_COUNTY;

CREATE TABLE CRASHTIME_PER_COUNTY (
  COUNTY TEXT,
  HOUR INTEGER,
  `2019` INTEGER,
  `2020` INTEGER,
  `2021` INTEGER,
  COLLISION_COUNT INTEGER
);

INSERT INTO CRASHTIME_PER_COUNTY (COUNTY, HOUR, `2019`, `2020`, `2021`, COLLISION_COUNT)
SELECT COUNTY, 
cast(substr(CRASHTIME, 1, 2) as int) as HOUR,
sum(case when substr(CRASHDATE, 7) = '2019' then 1 else 0 end) as `2019`,
sum(case when substr(CRASHDATE, 7) = '2020' then 1 else 0 end) as `2020`,
sum(case when substr(CRASHDATE, 7) = '2021' then 1 else 0 end) as `2021`,
count(COLLISION_ID) as COLLISION_COUNT
FROM CONSOLIDATED
WHERE COUNTY IS NOT NULL AND CRASHDATE IS NOT NULL AND CRASHTIME IS NOT NULL
GROUP BY COUNTY, cast(substr(CRASHTIME, 1, 2) as int)
ORDER BY COUNTY, HOUR;

SELECT * FROM CRASHTIME_PER_COUNTY;

---------------------------------------------------------------------------------------------------
-- PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX
DROP TABLE IF EXISTS PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX;

CREATE TABLE PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX (
    PERSON_SEX TEXT,
    Other INTEGER,
    None INTEGER,
    "Lap Belt & Harness" INTEGER,
	"Lap Belt" INTEGER,
    "Child Restraint Only" INTEGER,
	"Air Bag Deployed/Lap Belt/Harness" INTEGER,
	"Helmet/Other (In-Line Skater/Bicyclist)" INTEGER,
	Harness INTEGER,
	"Helmet Only (In-Line Skater/Bicyclist)" INTEGER,
	"Air Bag Deployed" INTEGER,
	"Air Bag Deployed/Lap Belt" INTEGER,
	"Helmet (Motorcycle Only)" INTEGER,
	"Stoppers Only (In-Line Skater/Bicyclist)" INTEGER,
	"Air Bag Deployed/Child Restraint" INTEGER,
	"Pads Only (In-Line Skater/Bicyclist)" INTEGER,
    "Grand Total" INTEGER
);

INSERT INTO PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX(
    PERSON_SEX,
    Other,
    None,
    "Lap Belt & Harness",
	"Lap Belt",
    "Child Restraint Only",
	"Air Bag Deployed/Lap Belt/Harness",
	"Helmet/Other (In-Line Skater/Bicyclist)",
	Harness,
	"Helmet Only (In-Line Skater/Bicyclist)",
	"Air Bag Deployed",
	"Air Bag Deployed/Lap Belt",
	"Helmet (Motorcycle Only)",
	"Stoppers Only (In-Line Skater/Bicyclist)",
	"Air Bag Deployed/Child Restraint",
	"Pads Only (In-Line Skater/Bicyclist)",
    "Grand Total" 
)
SELECT PERSON_SEX,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Other' THEN 1 ELSE 0 END) AS Other,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'None' THEN 1 ELSE 0 END) AS None,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Lap Belt & Harness' THEN 1 ELSE 0 END) AS "Lap Belt & Harness",
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Lap Belt' THEN 1 ELSE 0 END) AS "Lap Belt",
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Child Restraint Only' THEN 1 ELSE 0 END) AS "Child Restraint Only",
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed/Lap Belt/Harness' THEN 1 ELSE 0 END) AS "Air Bag Deployed/Lap Belt/Harness",
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Helmet/Other (In-Line Skater/Bicyclist)' THEN 1 ELSE 0 END) AS "Helmet/Other (In-Line Skater/Bicyclist)",
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Harness' THEN 1 ELSE 0 END) AS Harness,
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Helmet Only (In-Line Skater/Bicyclist)' THEN 1 ELSE 0 END) AS "Helmet Only (In-Line Skater/Bicyclist)",	
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed' THEN 1 ELSE 0 END) AS "Air Bag Deployed",
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed/Lap Belt' THEN 1 ELSE 0 END) AS "Air Bag Deployed/Lap Belt",
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Helmet (Motorcycle Only)' THEN 1 ELSE 0 END) AS "Helmet (Motorcycle Only)",
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Stoppers Only (In-Line Skater/Bicyclist' THEN 1 ELSE 0 END) AS "Stoppers Only (In-Line Skater/Bicyclist",
	SUM(CASE WHEN SAFETY_EQUIPMENT = 'Air Bag Deployed/Child Restraint' THEN 1 ELSE 0 END) AS "Air Bag Deployed/Child Restraint",
    SUM(CASE WHEN SAFETY_EQUIPMENT = 'Pads Only (In-Line Skater/Bicyclist)' THEN 1 ELSE 0 END) AS "Pads Only (In-Line Skater/Bicyclist)",
    COUNT (*) AS "Grand Total"
    FROM CONSOLIDATED
    WHERE PERSON_SEX IN ('F', 'M')
    GROUP BY PERSON_SEX
;

SELECT * FROM PERSON_INJURED_BY_SAFETY_EQUIPMENT_PER_SEX;

---------------------------------------------------------------------------------------------------
-- Perosn_Injured_by_Sex
DROP TABLE IF EXISTS PERSON_INJURED_BY_SEX;

CREATE TABLE PERSON_INJURED_BY_SEX (
    PERSON_INJURY TEXT,
    PERSON_SEX TEXT,
    BRONX INTEGER,
    BROOKLYN INTEGER,
    MANHATTAN INTEGER,
    QUEENS INTEGER,
    "STATEN ISLAND" INTEGER,
    "Grand Total" INTEGER
);

INSERT INTO PERSON_INJURED_BY_SEX (
    PERSON_INJURY,
    PERSON_SEX,
    BRONX,
    BROOKLYN,
    MANHATTAN,
    QUEENS,
    "STATEN ISLAND",
    "Grand Total"
)
SELECT PERSON_INJURY, PERSON_SEX,
    SUM(CASE WHEN BOROUGH = 'BRONX' THEN COLLISION_COUNT ELSE 0 END) AS BRONX,
    SUM(CASE WHEN BOROUGH = 'BROOKLYN' THEN COLLISION_COUNT ELSE 0 END) AS BROOKLYN,
    SUM(CASE WHEN BOROUGH = 'MANHATTAN' THEN COLLISION_COUNT ELSE 0 END) AS MANHATTAN,
    SUM(CASE WHEN BOROUGH = 'QUEENS' THEN COLLISION_COUNT ELSE 0 END) AS QUEENS,
    SUM(CASE WHEN BOROUGH = 'STATEN ISLAND' THEN COLLISION_COUNT ELSE 0 END) AS "STATEN ISLAND",
    SUM(COLLISION_COUNT) AS "Grand Total"
FROM (
    SELECT PERSON_INJURY, PERSON_SEX, BOROUGH, COUNT(COLLISION_ID) AS COLLISION_COUNT
    FROM CONSOLIDATED
    WHERE PERSON_INJURY IN ('Killed', 'Injured') AND PERSON_SEX IN ('F', 'M')
    GROUP BY PERSON_INJURY, PERSON_SEX, BOROUGH
) AS subquery
GROUP BY PERSON_INJURY, PERSON_SEX

UNION

SELECT 'Grand Total', NULL,
    SUM(CASE WHEN BOROUGH = 'BRONX' THEN COLLISION_COUNT ELSE 0 END) AS BRONX,
    SUM(CASE WHEN BOROUGH = 'BROOKLYN' THEN COLLISION_COUNT ELSE 0 END) AS BROOKLYN,
    SUM(CASE WHEN BOROUGH = 'MANHATTAN' THEN COLLISION_COUNT ELSE 0 END) AS MANHATTAN,
    SUM(CASE WHEN BOROUGH = 'QUEENS' THEN COLLISION_COUNT ELSE 0 END) AS QUEENS,
    SUM(CASE WHEN BOROUGH = 'STATEN ISLAND' THEN COLLISION_COUNT ELSE 0 END) AS "STATEN ISLAND",
    SUM(COLLISION_COUNT) AS "Grand Total"
FROM (
    SELECT PERSON_INJURY, PERSON_SEX, BOROUGH, COUNT(COLLISION_ID) AS COLLISION_COUNT
    FROM CONSOLIDATED
    WHERE PERSON_INJURY IN ('Killed', 'Injured') AND PERSON_SEX IN ('F', 'M')
    GROUP BY PERSON_INJURY, PERSON_SEX, BOROUGH
) AS subquery
GROUP BY 1
ORDER BY 1 DESC, 2 ASC;


Select * FROM PERSON_INJURED_BY_SEX